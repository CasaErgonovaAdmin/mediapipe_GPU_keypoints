# MediaPipe graph that performs pose tracking with TensorFlow Lite on GPU.

# Input video stream (GpuBuffer)
input_stream: "input_video"

# Output keypoints (as NormalizedLandmarkList, one per frame)
output_stream: "pose_landmarks"

# Enables segmentation (side packet)
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:enable_segmentation"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { bool_value: true }
    }
  }
}

# Flow control: throttle input to avoid buffer overflow
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:pose_landmarks"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

# Pose detection and landmark estimation
node {
  calculator: "PoseLandmarkGpu"
  input_side_packet: "ENABLE_SEGMENTATION:enable_segmentation"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "LANDMARKS:pose_landmarks"
  output_stream: "SEGMENTATION_MASK:segmentation_mask"
  output_stream: "DETECTION:pose_detection"
  output_stream: "ROI_FROM_LANDMARKS:roi_from_landmarks"
}

# Convert landmarks proto to JSON string
node {
  calculator: "ProtoToJsonCalculator"
  input_stream: "pose_landmarks"
  output_stream: "pose_landmarks_json"
}

# Write JSON string to a file (one line per frame)
node {
  calculator: "FileWriterCalculator"
  input_stream: "pose_landmarks_json"
  node_options: {
    [type.googleapis.com/mediapipe.FileWriterCalculatorOptions] {
      file_path: "pose_landmarks_output.jsonl"
    }
  }
}
